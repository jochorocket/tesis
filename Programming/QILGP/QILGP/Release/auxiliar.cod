; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	h:\usr\Douglas\My Dropbox\QLEP_Develop\QLEP\auxiliar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_caseVector:DWORD
COMM	_sintTable:DWORD
COMM	_qIndivInitLen:DWORD
COMM	_nConsts:DWORD
COMM	_lGateStep:QWORD
COMM	_qPop:DWORD
COMM	_qNopProb:QWORD
COMM	_observedTkIndiv:BYTE:028H
COMM	_nGenerations:DWORD
COMM	_nDemes:DWORD
COMM	_nSamples:DWORD
COMM	_validatingData:DWORD
COMM	_nCycles:DWORD
COMM	_headerLen:BYTE
COMM	_nVars:DWORD
COMM	_popSize:DWORD
COMM	_experimsOut:DWORD
COMM	_indiv:DWORD
COMM	_accumFit:DWORD
COMM	_generationsFreq:DWORD
COMM	_indivLen:DWORD
COMM	_trainingData:DWORD
COMM	_ObserveQIndivFunc:DWORD
COMM	_footerLen:BYTE
COMM	_destReg0:DWORD
COMM	_nInputs:DWORD
COMM	_termsCardins:DWORD
COMM	_effRegs:BYTE:08H
COMM	_termsDim:BYTE
COMM	_accumLen:DWORD
COMM	_hitsOut:DWORD
COMM	_dataRowDim:DWORD
COMM	_extrons:DWORD
COMM	_qIndivLen:DWORD
COMM	_nFuncs:BYTE
COMM	_classifProb:BYTE
COMM	_EvalIndivFunc:DWORD
COMM	_bestFit:QWORD
COMM	_effObserving:BYTE
COMM	_writeFreq:DWORD
COMM	_accumValFit:DWORD
COMM	_footer:DWORD
COMM	_nExperiments:DWORD
COMM	_averageOut:DWORD
COMM	_consts:DWORD
COMM	_bestValidTkIndiv:BYTE:028H
COMM	_qTokenAux:QWORD
COMM	_mCodesLens:DWORD
COMM	_header:DWORD
COMM	_mCodeDim:BYTE
COMM	_tkPop:DWORD
COMM	_nEvaluations:DWORD
COMM	_mCodeTable:DWORD
COMM	_typedTerms:BYTE
COMM	_termIdxs:DWORD
_DATA	ENDS
PUBLIC	_RunCaseTest
; Function compile flags: /Odtp
; File h:\usr\douglas\my dropbox\qlep_develop\qlep\auxiliar.c
_TEXT	SEGMENT
_v$ = 8							; size = 4
_RunCaseTest PROC

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9    : 	_asm mov edx, ecx

  00003	8b d1		 mov	 edx, ecx

; 10   : 	_asm FINIT

  00005	9b db e3	 finit

; 11   : 	_asm FLDZ

  00008	d9 ee		 fldz

; 12   : 	_asm FLDZ

  0000a	d9 ee		 fldz

; 13   : 	_asm FSUB	QWORD PTR [EAX+18]

  0000c	dc 60 12	 fsub	 QWORD PTR [eax+18]

; 14   : 	_asm FADD	ST(1),ST(0)

  0000f	dc c1		 fadd	 ST(1), ST(0)

; 15   : 	_asm FMUL	QWORD PTR [EAX+18]

  00011	dc 48 12	 fmul	 QWORD PTR [eax+18]

; 16   : 	_asm FSUB	ST(1),ST(0)

  00014	dc e9		 fsub	 ST(1), ST(0)

; 17   : 	_asm FADD	QWORD PTR [EAX+18]

  00016	dc 40 12	 fadd	 QWORD PTR [eax+18]

; 18   : 	_asm FSUB	QWORD PTR [EAX]

  00019	dc 20		 fsub	 QWORD PTR [eax]

; 19   : 	_asm FADD	ST(1),ST(0)

  0001b	dc c1		 fadd	 ST(1), ST(0)

; 20   : 	_asm FMUL	QWORD PTR [EAX+18]

  0001d	dc 48 12	 fmul	 QWORD PTR [eax+18]

; 21   : 	_asm FSUB	ST(1),ST(0)

  00020	dc e9		 fsub	 ST(1), ST(0)

; 22   : 	_asm FMUL	ST(1),ST(0)

  00022	dc c9		 fmul	 ST(1), ST(0)

; 23   : 	_asm FMUL	QWORD PTR [EAX]

  00024	dc 08		 fmul	 QWORD PTR [eax]

; 24   : 	_asm FSUB	ST(0),ST(0)

  00026	dc e8		 fsub	 ST(0), ST(0)

; 25   : 	_asm FADD	ST(1),ST(0)

  00028	dc c1		 fadd	 ST(1), ST(0)

; 26   : 	_asm FADD	QWORD PTR [EAX+8]

  0002a	dc 40 08	 fadd	 QWORD PTR [eax+8]

; 27   : 	_asm FMUL	ST(0),ST(1)

  0002d	d8 c9		 fmul	 ST(0), ST(1)

; 28   : 	_asm FADD	ST(1),ST(0)

  0002f	dc c1		 fadd	 ST(1), ST(0)

; 29   : 	_asm FMUL	ST(1),ST(0)

  00031	dc c9		 fmul	 ST(1), ST(0)

; 30   : 	_asm FADD	ST(0),ST(0)

  00033	dc c0		 fadd	 ST(0), ST(0)

; 31   : 	_asm FMUL	QWORD PTR [EAX+8]

  00035	dc 48 08	 fmul	 QWORD PTR [eax+8]

; 32   : 	_asm FSUB	QWORD PTR [EAX+10]

  00038	dc 60 0a	 fsub	 QWORD PTR [eax+10]

; 33   : 	_asm FMUL	ST(0),ST(0)

  0003b	dc c8		 fmul	 ST(0), ST(0)

; 34   : 	_asm FMUL	ST(0),ST(0)

  0003d	dc c8		 fmul	 ST(0), ST(0)

; 35   : 	_asm FMUL	QWORD PTR [EAX]

  0003f	dc 08		 fmul	 QWORD PTR [eax]

; 36   : 	_asm FSUB	ST(1),ST(0)

  00041	dc e9		 fsub	 ST(1), ST(0)

; 37   : 	_asm FSUB	QWORD PTR [EAX+18]

  00043	dc 60 12	 fsub	 QWORD PTR [eax+18]

; 38   : 	_asm FSUB	ST(0),ST(1)

  00046	d8 e1		 fsub	 ST(0), ST(1)

; 39   : 	_asm FADD	ST(0),ST(1)

  00048	d8 c1		 fadd	 ST(0), ST(1)

; 40   : 	_asm FMUL	ST(0),ST(1)

  0004a	d8 c9		 fmul	 ST(0), ST(1)

; 41   : 	_asm FMUL	ST(1),ST(0)

  0004c	dc c9		 fmul	 ST(1), ST(0)

; 42   : 	_asm FMUL	ST(0),ST(1)

  0004e	d8 c9		 fmul	 ST(0), ST(1)

; 43   : 	_asm FSUB	ST(0),ST(1)

  00050	d8 e1		 fsub	 ST(0), ST(1)

; 44   : 	_asm FSUB	ST(1),ST(0)

  00052	dc e9		 fsub	 ST(1), ST(0)

; 45   : 	_asm FSUB	ST(1),ST(0)

  00054	dc e9		 fsub	 ST(1), ST(0)

; 46   : 	_asm FMUL	ST(0),ST(1)

  00056	d8 c9		 fmul	 ST(0), ST(1)

; 47   : 	_asm FMUL	ST(0),ST(1)

  00058	d8 c9		 fmul	 ST(0), ST(1)

; 48   : 	_asm FMUL	ST(0),ST(1)

  0005a	d8 c9		 fmul	 ST(0), ST(1)

; 49   : 	_asm FMUL	ST(0),ST(0)

  0005c	dc c8		 fmul	 ST(0), ST(0)

; 50   : 	_asm FMUL	QWORD PTR [EAX+10]

  0005e	dc 48 0a	 fmul	 QWORD PTR [eax+10]

; 51   : 	_asm FADD	QWORD PTR [EAX+18]

  00061	dc 40 12	 fadd	 QWORD PTR [eax+18]

; 52   : 	_asm FMUL	QWORD PTR [EAX]

  00064	dc 08		 fmul	 QWORD PTR [eax]

; 53   : 	_asm FMUL	ST(0),ST(0)

  00066	dc c8		 fmul	 ST(0), ST(0)

; 54   : 	_asm FMUL	ST(1),ST(0)

  00068	dc c9		 fmul	 ST(1), ST(0)

; 55   : 	_asm FMUL	ST(1),ST(0)

  0006a	dc c9		 fmul	 ST(1), ST(0)

; 56   : 	_asm FADD	ST(0),ST(0)

  0006c	dc c0		 fadd	 ST(0), ST(0)

; 57   : 	_asm FST	QWORD PTR [EAX]

  0006e	dd 10		 fst	 QWORD PTR [eax]

; 58   : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_RunCaseTest ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	_Test
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_v$ = 8							; size = 4
_Test	PROC

; 84   : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp

; 85   : 	v[0] = 0.0;

  00083	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00086	d9 ee		 fldz
  00088	dd 18		 fstp	 QWORD PTR [eax]

; 86   : 	v[1] = 0.0;

  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0008d	d9 ee		 fldz
  0008f	dd 59 08	 fstp	 QWORD PTR [ecx+8]

; 87   : 	v[2] = 0.0;

  00092	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00095	d9 ee		 fldz
  00097	dd 5a 10	 fstp	 QWORD PTR [edx+16]

; 88   : 	v[3] = 0.0;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0009d	d9 ee		 fldz
  0009f	dd 58 18	 fstp	 QWORD PTR [eax+24]

; 89   : 
; 90   : 	return;
; 91   : }

  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_Test	ENDP
_TEXT	ENDS
PUBLIC	_Test2
; Function compile flags: /Odtp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_Test2	PROC

; 94   : {

  000b0	55		 push	 ebp
  000b1	8b ec		 mov	 ebp, esp

; 95   : 	v[0] = v[0];

  000b3	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000b9	dd 01		 fld	 QWORD PTR [ecx]
  000bb	dd 18		 fstp	 QWORD PTR [eax]

; 96   : 	_asm	fldz

  000bd	d9 ee		 fldz

; 97   : 	_asm	fst QWORD PTR [eax]

  000bf	dd 10		 fst	 QWORD PTR [eax]

; 98   : 	_asm	fld1

  000c1	d9 e8		 fld1

; 99   : 	_asm	fst QWORD PTR [eax+8]

  000c3	dd 50 08	 fst	 QWORD PTR [eax+8]

; 100  : 	_asm	fldpi

  000c6	d9 eb		 fldpi

; 101  : 	_asm	fst QWORD PTR [eax+16]

  000c8	dd 50 10	 fst	 QWORD PTR [eax+16]

; 102  : 	_asm	fldl2t

  000cb	d9 e9		 fldl2t

; 103  : 	_asm	fst QWORD PTR [eax+24]

  000cd	dd 50 18	 fst	 QWORD PTR [eax+24]

; 104  : 
; 105  : 	//return;
; 106  : }

  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_Test2	ENDP
_TEXT	ENDS
PUBLIC	_GetMC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_GetMC	PROC

; 109  : {

  000e0	55		 push	 ebp
  000e1	8b ec		 mov	 ebp, esp

; 110  : 	_asm	fadd	QWORD PTR [eax]		//1

  000e3	dc 00		 fadd	 QWORD PTR [eax]

; 111  : 	_asm	fadd	QWORD PTR [eax+8]

  000e5	dc 40 08	 fadd	 QWORD PTR [eax+8]

; 112  : 	_asm	fadd	QWORD PTR [eax+16]

  000e8	dc 40 10	 fadd	 QWORD PTR [eax+16]

; 113  : 	_asm	fadd	QWORD PTR [eax+24]

  000eb	dc 40 18	 fadd	 QWORD PTR [eax+24]

; 114  : 	_asm	fadd	QWORD PTR [eax+32]

  000ee	dc 40 20	 fadd	 QWORD PTR [eax+32]

; 115  : 	_asm	fadd	QWORD PTR [eax+40]

  000f1	dc 40 28	 fadd	 QWORD PTR [eax+40]

; 116  : 	_asm	fadd	QWORD PTR [eax+48]

  000f4	dc 40 30	 fadd	 QWORD PTR [eax+48]

; 117  : 	_asm	fadd	QWORD PTR [eax+56]

  000f7	dc 40 38	 fadd	 QWORD PTR [eax+56]

; 118  : 
; 119  : 	_asm	fadd	st(0), st(0)		//2

  000fa	dc c0		 fadd	 ST(0), ST(0)

; 120  : 	_asm	fadd	st(0), st(1)

  000fc	d8 c1		 fadd	 ST(0), ST(1)

; 121  : 	_asm	fadd	st(0), st(2)

  000fe	d8 c2		 fadd	 ST(0), ST(2)

; 122  : 	_asm	fadd	st(0), st(3)

  00100	d8 c3		 fadd	 ST(0), ST(3)

; 123  : 	_asm	fadd	st(0), st(4)

  00102	d8 c4		 fadd	 ST(0), ST(4)

; 124  : 	_asm	fadd	st(0), st(5)

  00104	d8 c5		 fadd	 ST(0), ST(5)

; 125  : 	_asm	fadd	st(0), st(6)

  00106	d8 c6		 fadd	 ST(0), ST(6)

; 126  : 	_asm	fadd	st(0), st(7)

  00108	d8 c7		 fadd	 ST(0), ST(7)

; 127  : 
; 128  : 	_asm	fadd	st(1), st(0)		//3

  0010a	dc c1		 fadd	 ST(1), ST(0)

; 129  : 	_asm	fadd	st(2), st(0)

  0010c	dc c2		 fadd	 ST(2), ST(0)

; 130  : 	_asm	fadd	st(3), st(0)

  0010e	dc c3		 fadd	 ST(3), ST(0)

; 131  : 	_asm	fadd	st(4), st(0)

  00110	dc c4		 fadd	 ST(4), ST(0)

; 132  : 	_asm	fadd	st(5), st(0)

  00112	dc c5		 fadd	 ST(5), ST(0)

; 133  : 	_asm	fadd	st(6), st(0)

  00114	dc c6		 fadd	 ST(6), ST(0)

; 134  : 	_asm	fadd	st(7), st(0)

  00116	dc c7		 fadd	 ST(7), ST(0)

; 135  : 
; 136  : 	_asm	fsub	QWORD PTR [eax]		//4

  00118	dc 20		 fsub	 QWORD PTR [eax]

; 137  : 	_asm	fsub	QWORD PTR [eax+8]

  0011a	dc 60 08	 fsub	 QWORD PTR [eax+8]

; 138  : 	_asm	fsub	QWORD PTR [eax+16]

  0011d	dc 60 10	 fsub	 QWORD PTR [eax+16]

; 139  : 	_asm	fsub	QWORD PTR [eax+24]

  00120	dc 60 18	 fsub	 QWORD PTR [eax+24]

; 140  : 	_asm	fsub	QWORD PTR [eax+32]

  00123	dc 60 20	 fsub	 QWORD PTR [eax+32]

; 141  : 	_asm	fsub	QWORD PTR [eax+40]

  00126	dc 60 28	 fsub	 QWORD PTR [eax+40]

; 142  : 	_asm	fsub	QWORD PTR [eax+48]

  00129	dc 60 30	 fsub	 QWORD PTR [eax+48]

; 143  : 	_asm	fsub	QWORD PTR [eax+56]

  0012c	dc 60 38	 fsub	 QWORD PTR [eax+56]

; 144  : 
; 145  : 	_asm	fsub	st(0), st(0)		//5

  0012f	dc e8		 fsub	 ST(0), ST(0)

; 146  : 	_asm	fsub	st(0), st(1)

  00131	d8 e1		 fsub	 ST(0), ST(1)

; 147  : 	_asm	fsub	st(0), st(2)

  00133	d8 e2		 fsub	 ST(0), ST(2)

; 148  : 	_asm	fsub	st(0), st(3)

  00135	d8 e3		 fsub	 ST(0), ST(3)

; 149  : 	_asm	fsub	st(0), st(4)

  00137	d8 e4		 fsub	 ST(0), ST(4)

; 150  : 	_asm	fsub	st(0), st(5)

  00139	d8 e5		 fsub	 ST(0), ST(5)

; 151  : 	_asm	fsub	st(0), st(6)

  0013b	d8 e6		 fsub	 ST(0), ST(6)

; 152  : 	_asm	fsub	st(0), st(7)

  0013d	d8 e7		 fsub	 ST(0), ST(7)

; 153  : 
; 154  : 	_asm	fsub	st(1), st(0)		//6

  0013f	dc e9		 fsub	 ST(1), ST(0)

; 155  : 	_asm	fsub	st(2), st(0)

  00141	dc ea		 fsub	 ST(2), ST(0)

; 156  : 	_asm	fsub	st(3), st(0)

  00143	dc eb		 fsub	 ST(3), ST(0)

; 157  : 	_asm	fsub	st(4), st(0)

  00145	dc ec		 fsub	 ST(4), ST(0)

; 158  : 	_asm	fsub	st(5), st(0)

  00147	dc ed		 fsub	 ST(5), ST(0)

; 159  : 	_asm	fsub	st(6), st(0)

  00149	dc ee		 fsub	 ST(6), ST(0)

; 160  : 	_asm	fsub	st(7), st(0)

  0014b	dc ef		 fsub	 ST(7), ST(0)

; 161  : 
; 162  : 	_asm	fmul	QWORD PTR [eax]		//7

  0014d	dc 08		 fmul	 QWORD PTR [eax]

; 163  : 	_asm	fmul	QWORD PTR [eax+8]

  0014f	dc 48 08	 fmul	 QWORD PTR [eax+8]

; 164  : 	_asm	fmul	QWORD PTR [eax+16]

  00152	dc 48 10	 fmul	 QWORD PTR [eax+16]

; 165  : 	_asm	fmul	QWORD PTR [eax+24]

  00155	dc 48 18	 fmul	 QWORD PTR [eax+24]

; 166  : 	_asm	fmul	QWORD PTR [eax+32]

  00158	dc 48 20	 fmul	 QWORD PTR [eax+32]

; 167  : 	_asm	fmul	QWORD PTR [eax+40]

  0015b	dc 48 28	 fmul	 QWORD PTR [eax+40]

; 168  : 	_asm	fmul	QWORD PTR [eax+48]

  0015e	dc 48 30	 fmul	 QWORD PTR [eax+48]

; 169  : 	_asm	fmul	QWORD PTR [eax+56]

  00161	dc 48 38	 fmul	 QWORD PTR [eax+56]

; 170  : 
; 171  : 	_asm	fmul	st(0), st(0)		//8

  00164	dc c8		 fmul	 ST(0), ST(0)

; 172  : 	_asm	fmul	st(0), st(1)

  00166	d8 c9		 fmul	 ST(0), ST(1)

; 173  : 	_asm	fmul	st(0), st(2)

  00168	d8 ca		 fmul	 ST(0), ST(2)

; 174  : 	_asm	fmul	st(0), st(3)

  0016a	d8 cb		 fmul	 ST(0), ST(3)

; 175  : 	_asm	fmul	st(0), st(4)

  0016c	d8 cc		 fmul	 ST(0), ST(4)

; 176  : 	_asm	fmul	st(0), st(5)

  0016e	d8 cd		 fmul	 ST(0), ST(5)

; 177  : 	_asm	fmul	st(0), st(6)

  00170	d8 ce		 fmul	 ST(0), ST(6)

; 178  : 	_asm	fmul	st(0), st(7)

  00172	d8 cf		 fmul	 ST(0), ST(7)

; 179  : 
; 180  : 	_asm	fmul	st(1), st(0)		//9

  00174	dc c9		 fmul	 ST(1), ST(0)

; 181  : 	_asm	fmul	st(2), st(0)

  00176	dc ca		 fmul	 ST(2), ST(0)

; 182  : 	_asm	fmul	st(3), st(0)

  00178	dc cb		 fmul	 ST(3), ST(0)

; 183  : 	_asm	fmul	st(4), st(0)

  0017a	dc cc		 fmul	 ST(4), ST(0)

; 184  : 	_asm	fmul	st(5), st(0)

  0017c	dc cd		 fmul	 ST(5), ST(0)

; 185  : 	_asm	fmul	st(6), st(0)

  0017e	dc ce		 fmul	 ST(6), ST(0)

; 186  : 	_asm	fmul	st(7), st(0)

  00180	dc cf		 fmul	 ST(7), ST(0)

; 187  : 
; 188  : 	_asm	fst		QWORD PTR [eax]		//a

  00182	dd 10		 fst	 QWORD PTR [eax]

; 189  : 	_asm	fst		QWORD PTR [eax+8]

  00184	dd 50 08	 fst	 QWORD PTR [eax+8]

; 190  : 
; 191  : 	_asm	fxch	st(1)				//b

  00187	d9 c9		 fxch	 ST(1)

; 192  : 	_asm	fxch	st(2)

  00189	d9 ca		 fxch	 ST(2)

; 193  : 	_asm	fxch	st(3)

  0018b	d9 cb		 fxch	 ST(3)

; 194  : 	_asm	fxch	st(4)

  0018d	d9 cc		 fxch	 ST(4)

; 195  : 	_asm	fxch	st(5)

  0018f	d9 cd		 fxch	 ST(5)

; 196  : 	_asm	fxch	st(6)

  00191	d9 ce		 fxch	 ST(6)

; 197  : 	_asm	fxch	st(7)

  00193	d9 cf		 fxch	 ST(7)

; 198  : 
; 199  : 	_asm	fld		QWORD PTR [eax]

  00195	dd 00		 fld	 QWORD PTR [eax]

; 200  : 	_asm	fld		QWORD PTR [eax+8]

  00197	dd 40 08	 fld	 QWORD PTR [eax+8]

; 201  : 	_asm	fld		QWORD PTR [eax+16]

  0019a	dd 40 10	 fld	 QWORD PTR [eax+16]

; 202  : 	_asm	fld		QWORD PTR [eax+24]

  0019d	dd 40 18	 fld	 QWORD PTR [eax+24]

; 203  : 	_asm	fld		QWORD PTR [eax+40]

  001a0	dd 40 28	 fld	 QWORD PTR [eax+40]

; 204  : 	_asm	fld		QWORD PTR [eax+48]

  001a3	dd 40 30	 fld	 QWORD PTR [eax+48]

; 205  : 
; 206  : 	return;
; 207  : }

  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_GetMC	ENDP
_TEXT	ENDS
END
