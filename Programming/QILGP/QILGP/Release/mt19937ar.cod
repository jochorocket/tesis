; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	D:\JOCHO\sanpa\seminario de tesis\QILGP\QILGP\mt19937ar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?mag01@?1??genrand_int32@@9@9 DD 00H			; `genrand_int32'::`2'::mag01
	DD	09908b0dfH
_mti	DD	0271H
_DATA	ENDS
PUBLIC	_genrand_real1
PUBLIC	_genrand_int32
PUBLIC	_init_genrand
_mt	DD	0270H DUP (?)
_BSS	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\mt19937ar.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_init_genrand PROC

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   :     mt[0]= s & 0xffffffffUL;

  00003	b8 04 00 00 00	 mov	 eax, 4
  00008	6b c8 00	 imul	 ecx, eax, 0
  0000b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0000e	89 91 00 00 00
	00		 mov	 DWORD PTR _mt[ecx], edx

; 63   :     for (mti=1; mti<N; mti++) {

  00014	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _mti, 1
  0001e	eb 0d		 jmp	 SHORT $LN3@init_genra
$LN2@init_genra:
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _mti
  00025	83 c0 01	 add	 eax, 1
  00028	a3 00 00 00 00	 mov	 DWORD PTR _mti, eax
$LN3@init_genra:
  0002d	81 3d 00 00 00
	00 70 02 00 00	 cmp	 DWORD PTR _mti, 624	; 00000270H
  00037	7d 50		 jge	 SHORT $LN4@init_genra

; 64   :         mt[mti] = 
; 65   : 	    (1812433253UL * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti); 

  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mti
  0003f	8b 14 8d fc ff
	ff ff		 mov	 edx, DWORD PTR _mt[ecx*4-4]
  00046	c1 ea 1e	 shr	 edx, 30			; 0000001eH
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _mti
  0004e	33 14 85 fc ff
	ff ff		 xor	 edx, DWORD PTR _mt[eax*4-4]
  00055	69 ca 65 89 07
	6c		 imul	 ecx, edx, 1812433253
  0005b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _mti
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mti
  00067	89 0c 95 00 00
	00 00		 mov	 DWORD PTR _mt[edx*4], ecx

; 66   :         /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
; 67   :         /* In the previous versions, MSBs of the seed affect   */
; 68   :         /* only MSBs of the array mt[].                        */
; 69   :         /* 2002/01/09 modified by Makoto Matsumoto             */
; 70   :         mt[mti] &= 0xffffffffUL;

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mti
  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mti
  00079	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _mt[ecx*4]
  00080	89 14 85 00 00
	00 00		 mov	 DWORD PTR _mt[eax*4], edx

; 71   :         /* for >32 bit machines */
; 72   :     }

  00087	eb 97		 jmp	 SHORT $LN2@init_genra
$LN4@init_genra:

; 73   : }

  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_init_genrand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\mt19937ar.c
_TEXT	SEGMENT
_kk$1 = -8						; size = 4
_y$ = -4						; size = 4
_genrand_int32 PROC

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 107  :     unsigned long y;
; 108  :     static unsigned long mag01[2]={0x0UL, MATRIX_A};
; 109  :     /* mag01[x] = x * MATRIX_A  for x=0,1 */
; 110  : 
; 111  :     if (mti >= N) { /* generate N words at one time */

  00006	81 3d 00 00 00
	00 70 02 00 00	 cmp	 DWORD PTR _mti, 624	; 00000270H
  00010	0f 8c 4f 01 00
	00		 jl	 $LN8@genrand_in

; 112  :         int kk;
; 113  : 
; 114  :         if (mti == N+1)   /* if init_genrand() has not been called, */

  00016	81 3d 00 00 00
	00 71 02 00 00	 cmp	 DWORD PTR _mti, 625	; 00000271H
  00020	75 0d		 jne	 SHORT $LN7@genrand_in

; 115  :             init_genrand(5489UL); /* a default initial seed is used */

  00022	68 71 15 00 00	 push	 5489			; 00001571H
  00027	e8 00 00 00 00	 call	 _init_genrand
  0002c	83 c4 04	 add	 esp, 4
$LN7@genrand_in:

; 116  : 
; 117  :         for (kk=0;kk<N-M;kk++) {

  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _kk$1[ebp], 0
  00036	eb 09		 jmp	 SHORT $LN6@genrand_in
$LN5@genrand_in:
  00038	8b 45 f8	 mov	 eax, DWORD PTR _kk$1[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 f8	 mov	 DWORD PTR _kk$1[ebp], eax
$LN6@genrand_in:
  00041	81 7d f8 e3 00
	00 00		 cmp	 DWORD PTR _kk$1[ebp], 227 ; 000000e3H
  00048	7d 4d		 jge	 SHORT $LN4@genrand_in

; 118  :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _kk$1[ebp]
  0004d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _mt[ecx*4]
  00054	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _kk$1[ebp]
  0005d	8b 0c 85 04 00
	00 00		 mov	 ecx, DWORD PTR _mt[eax*4+4]
  00064	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0006a	0b d1		 or	 edx, ecx
  0006c	89 55 fc	 mov	 DWORD PTR _y$[ebp], edx

; 119  :             mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1UL];

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00072	d1 ea		 shr	 edx, 1
  00074	8b 45 f8	 mov	 eax, DWORD PTR _kk$1[ebp]
  00077	33 14 85 34 06
	00 00		 xor	 edx, DWORD PTR _mt[eax*4+1588]
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  00081	83 e1 01	 and	 ecx, 1
  00084	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR ?mag01@?1??genrand_int32@@9@9[ecx*4]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _kk$1[ebp]
  0008e	89 14 85 00 00
	00 00		 mov	 DWORD PTR _mt[eax*4], edx

; 120  :         }

  00095	eb a1		 jmp	 SHORT $LN5@genrand_in
$LN4@genrand_in:

; 121  :         for (;kk<N-1;kk++) {

  00097	eb 09		 jmp	 SHORT $LN3@genrand_in
$LN2@genrand_in:
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _kk$1[ebp]
  0009c	83 c1 01	 add	 ecx, 1
  0009f	89 4d f8	 mov	 DWORD PTR _kk$1[ebp], ecx
$LN3@genrand_in:
  000a2	81 7d f8 6f 02
	00 00		 cmp	 DWORD PTR _kk$1[ebp], 623 ; 0000026fH
  000a9	7d 4c		 jge	 SHORT $LN1@genrand_in

; 122  :             y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

  000ab	8b 55 f8	 mov	 edx, DWORD PTR _kk$1[ebp]
  000ae	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _mt[edx*4]
  000b5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _kk$1[ebp]
  000bd	8b 14 8d 04 00
	00 00		 mov	 edx, DWORD PTR _mt[ecx*4+4]
  000c4	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  000ca	0b c2		 or	 eax, edx
  000cc	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 123  :             mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1UL];

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  000d2	d1 e8		 shr	 eax, 1
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _kk$1[ebp]
  000d7	33 04 8d 74 fc
	ff ff		 xor	 eax, DWORD PTR _mt[ecx*4-908]
  000de	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  000e1	83 e2 01	 and	 edx, 1
  000e4	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR ?mag01@?1??genrand_int32@@9@9[edx*4]
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _kk$1[ebp]
  000ee	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _mt[ecx*4], eax

; 124  :         }

  000f5	eb a2		 jmp	 SHORT $LN2@genrand_in
$LN1@genrand_in:

; 125  :         y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

  000f7	ba 04 00 00 00	 mov	 edx, 4
  000fc	69 c2 6f 02 00
	00		 imul	 eax, edx, 623
  00102	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _mt[eax]
  00108	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  0010e	ba 04 00 00 00	 mov	 edx, 4
  00113	6b c2 00	 imul	 eax, edx, 0
  00116	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _mt[eax]
  0011c	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00122	0b ca		 or	 ecx, edx
  00124	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 126  :         mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1UL];

  00127	b8 04 00 00 00	 mov	 eax, 4
  0012c	69 c8 8c 01 00
	00		 imul	 ecx, eax, 396
  00132	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00135	d1 ea		 shr	 edx, 1
  00137	33 91 00 00 00
	00		 xor	 edx, DWORD PTR _mt[ecx]
  0013d	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  00140	83 e0 01	 and	 eax, 1
  00143	33 14 85 00 00
	00 00		 xor	 edx, DWORD PTR ?mag01@?1??genrand_int32@@9@9[eax*4]
  0014a	b9 04 00 00 00	 mov	 ecx, 4
  0014f	69 c1 6f 02 00
	00		 imul	 eax, ecx, 623
  00155	89 90 00 00 00
	00		 mov	 DWORD PTR _mt[eax], edx

; 127  : 
; 128  :         mti = 0;

  0015b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mti, 0
$LN8@genrand_in:

; 129  :     }
; 130  :   
; 131  :     y = mt[mti++];

  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mti
  0016b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _mt[ecx*4]
  00172	89 55 fc	 mov	 DWORD PTR _y$[ebp], edx
  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR _mti
  0017a	83 c0 01	 add	 eax, 1
  0017d	a3 00 00 00 00	 mov	 DWORD PTR _mti, eax

; 132  : 
; 133  :     /* Tempering */
; 134  :     y ^= (y >> 11);

  00182	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  00185	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00188	33 4d fc	 xor	 ecx, DWORD PTR _y$[ebp]
  0018b	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 135  :     y ^= (y << 7) & 0x9d2c5680UL;

  0018e	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00191	c1 e2 07	 shl	 edx, 7
  00194	81 e2 80 56 2c
	9d		 and	 edx, -1658038656	; 9d2c5680H
  0019a	33 55 fc	 xor	 edx, DWORD PTR _y$[ebp]
  0019d	89 55 fc	 mov	 DWORD PTR _y$[ebp], edx

; 136  :     y ^= (y << 15) & 0xefc60000UL;

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  001a3	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  001a6	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  001ab	33 45 fc	 xor	 eax, DWORD PTR _y$[ebp]
  001ae	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 137  :     y ^= (y >> 18);

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  001b4	c1 e9 12	 shr	 ecx, 18			; 00000012H
  001b7	33 4d fc	 xor	 ecx, DWORD PTR _y$[ebp]
  001ba	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 138  : 
; 139  :     return y;

  001bd	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]

; 140  : }

  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c3		 ret	 0
_genrand_int32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\mt19937ar.c
_TEXT	SEGMENT
tv73 = -12						; size = 8
tv69 = -4						; size = 4
_genrand_real1 PROC

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 151  :     return genrand_int32()*(1.0/4294967295.0); 

  00006	e8 00 00 00 00	 call	 _genrand_int32
  0000b	89 45 fc	 mov	 DWORD PTR tv69[ebp], eax
  0000e	f2 0f 2a 45 fc	 cvtsi2sd xmm0, DWORD PTR tv69[ebp]
  00013	8b 45 fc	 mov	 eax, DWORD PTR tv69[ebp]
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00022	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3df0000000100000
  0002a	f2 0f 11 45 f4	 movsd	 QWORD PTR tv73[ebp], xmm0
  0002f	dd 45 f4	 fld	 QWORD PTR tv73[ebp]

; 152  :     /* divided by 2^32-1 */ 
; 153  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_genrand_real1 ENDP
_TEXT	ENDS
END
