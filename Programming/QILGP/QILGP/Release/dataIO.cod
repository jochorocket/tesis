; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	D:\JOCHO\sanpa\seminario de tesis\QILGP\QILGP\dataIO.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__strcat:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__putchar:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__printf:PROC
EXTRN	__imp__strcpy:PROC
EXTRN	__imp__itoa:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__fputc:PROC
EXTRN	@__security_check_cookie@4:PROC
COMM	_termIdxs:DWORD
COMM	_nSamplesTest:DWORD
COMM	_typedTerms:BYTE
COMM	_mCodeTable:DWORD
COMM	_nEvaluations:DWORD
COMM	_tkPop:DWORD
COMM	_mCodeDim:BYTE
COMM	_header:DWORD
COMM	_mCodesLens:DWORD
COMM	_qTokenAux:QWORD
COMM	_bestValidTkIndiv:BYTE:028H
COMM	_consts:DWORD
COMM	_averageOut:DWORD
COMM	_nExperiments:DWORD
COMM	_footer:DWORD
COMM	_accumValFit:DWORD
COMM	_writeFreq:DWORD
COMM	_effObserving:BYTE
COMM	_bestFit:QWORD
COMM	_EvalIndivFunc:DWORD
COMM	_classifProb:BYTE
COMM	_nFuncs:BYTE
COMM	_demes:DWORD
COMM	_qIndivLen:DWORD
COMM	_extrons:DWORD
COMM	_dataRowDim:DWORD
COMM	_hitsOut:DWORD
COMM	_accumLen:DWORD
COMM	_testingData:DWORD
COMM	_termsDim:BYTE
COMM	_effRegs:BYTE:08H
COMM	_termsCardins:DWORD
COMM	_nInputs:DWORD
COMM	_destReg0:DWORD
COMM	_footerLen:BYTE
COMM	_ObserveQIndivFunc:DWORD
COMM	_trainingData:DWORD
COMM	_nEvalsExp:DWORD
COMM	_indivLen:DWORD
COMM	_generationsFreq:DWORD
COMM	_accumFit:DWORD
COMM	_indiv:DWORD
COMM	_experimsOut:DWORD
COMM	_popSize:DWORD
COMM	_nVars:DWORD
COMM	_headerLen:BYTE
COMM	_nCycles:DWORD
COMM	_validatingData:DWORD
COMM	_nDemes:DWORD
COMM	_nGenerations:DWORD
COMM	_observedTkIndiv:BYTE:028H
COMM	_qNopProb:QWORD
COMM	_qPop:DWORD
COMM	_lGateStep:QWORD
COMM	_nConsts:DWORD
COMM	_bestTkIndiv:BYTE:028H
COMM	_gwi:DWORD
COMM	_bestExpTkIndiv:BYTE:028H
COMM	_nSamplesTrain:DWORD
COMM	_qIndivInitLen:DWORD
COMM	_nSamplesValid:DWORD
COMM	_sintTable:DWORD
COMM	_caseVector:DWORD
_DATA	ENDS
$SG4294967291 DB '%.4f ', 00H
	ORG $+2
$SG4294967290 DB '%.4f ', 00H
	ORG $+2
$SG4294967289 DB '%x%x ', 00H
	ORG $+2
$SG4294967288 DB 'w', 00H
	ORG $+2
$SG4294967287 DB 'QILGP_Out.csv', 00H
	ORG $+2
$SG4294967286 DB '%d;', 00H
$SG4294967285 DB '%.8f;', 00H
	ORG $+2
$SG4294967284 DB '%d;', 00H
$SG4294967283 DB '%.8f;', 00H
	ORG $+2
$SG4294967282 DB 'w', 00H
	ORG $+2
$SG4294967281 DB 'QILGP_Out.csv', 00H
	ORG $+2
$SG4294967280 DB '%d;', 00H
$SG4294967279 DB '%.8f;', 00H
	ORG $+2
$SG4294967278 DB '.txt', 00H, 00H
	ORG $+2
$SG4294967277 DB 'w', 00H
	ORG $+2
$SG4294967276 DB 'w', 00H
	ORG $+2
$SG4294967275 DB '%f', 0aH, 00H
$SG4294967274 DB '%f', 0aH, 00H
PUBLIC	_WriteProgOuts
PUBLIC	_WriteBestProgOuts
PUBLIC	_NewExperimOutFile
PUBLIC	_InitCase
PUBLIC	_InitCaseVector
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3df0000000100000
PUBLIC	__real@3f70624dd2f1a9fc
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
	ALIGN	4

?i@?1??WriteBestProgOuts@@9@9 DD 01H DUP (?)		; `WriteBestProgOuts'::`2'::i
?i@?1??WriteProgOuts@@9@9 DD 01H DUP (?)		; `WriteProgOuts'::`2'::i
?fp@?1??NewExperimOutFile@@9@9 DD 01H DUP (?)		; `NewExperimOutFile'::`2'::fp
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f70624dd2f1a9fc
CONST	SEGMENT
__real@3f70624dd2f1a9fc DQ 03f70624dd2f1a9fcr	; 0.004
CONST	ENDS
;	COMDAT __real@3df0000000100000
CONST	SEGMENT
__real@3df0000000100000 DQ 03df0000000100000r	; 2.32831e-010
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\dataio.c
_TEXT	SEGMENT
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_InitCaseVector PROC

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 44   : 	register int i, j;
; 45   : 
; 46   : 	caseVector = (float*)malloc((nVars + nConsts) * sizeof(double));

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR _nVars
  0000c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _nConsts
  00012	c1 e0 03	 shl	 eax, 3
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0001c	83 c4 04	 add	 esp, 4
  0001f	a3 00 00 00 00	 mov	 DWORD PTR _caseVector, eax

; 47   : 	i = nVars;

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nVars
  0002a	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx

; 48   : 	for (j = 0; j < nConsts; i++, j++)

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00034	eb 12		 jmp	 SHORT $LN3@InitCaseVe
$LN2@InitCaseVe:
  00036	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00039	83 c2 01	 add	 edx, 1
  0003c	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	89 45 fc	 mov	 DWORD PTR _j$[ebp], eax
$LN3@InitCaseVe:
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  0004b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _nConsts
  00051	7d 19		 jge	 SHORT $LN1@InitCaseVe

; 49   : 	{
; 50   : 		caseVector[i] = consts[j];

  00053	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR _caseVector
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _j$[ebp]
  0005e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _consts
  00064	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00067	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 51   : 	}

  0006a	eb ca		 jmp	 SHORT $LN2@InitCaseVe
$LN1@InitCaseVe:

; 52   : }

  0006c	5e		 pop	 esi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_InitCaseVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\dataio.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_dataRow$ = 8						; size = 4
_cases$ = 12						; size = 4
_InitCase PROC

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 56   : 	register int i;
; 57   : 
; 58   : 	for (i = 0; i < nVars; i++)

  00005	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000c	eb 09		 jmp	 SHORT $LN3@InitCase
$LN2@InitCase:
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00011	83 c0 01	 add	 eax, 1
  00014	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@InitCase:
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _nVars
  00020	7d 23		 jge	 SHORT $LN1@InitCase

; 59   : 	{
; 60   : 		caseVector[i] = *(cases + dataRow * dataRowDim + i);

  00022	8b 55 08	 mov	 edx, DWORD PTR _dataRow$[ebp]
  00025	0f af 15 00 00
	00 00		 imul	 edx, DWORD PTR _dataRowDim
  0002c	8b 45 0c	 mov	 eax, DWORD PTR _cases$[ebp]
  0002f	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00032	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _caseVector
  0003a	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  0003d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00040	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 61   : 	}

  00043	eb c9		 jmp	 SHORT $LN2@InitCase
$LN1@InitCase:

; 62   : }

  00045	5e		 pop	 esi
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_InitCase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\dataio.c
_TEXT	SEGMENT
_expNoStr$ = -72					; size = 4
_fileName$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_fName$ = 8						; size = 4
_experimNo$ = 12					; size = 4
_NewExperimOutFile PROC

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 174  : 	char fileName[64];
; 175  : 	char expNoStr[4];
; 176  : 	static FILE *fp;
; 177  : 
; 178  : 	itoa(experimNo, expNoStr, 10);

  00010	6a 0a		 push	 10			; 0000000aH
  00012	8d 45 b8	 lea	 eax, DWORD PTR _expNoStr$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _experimNo$[ebp]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__itoa
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 179  : 	//strcpy(fileName, "..\\..\\..\\..\\Outputs\\");
; 180  :     //strcat(fileName, fName);
; 181  :     strcpy(fileName, fName);

  00023	8b 55 08	 mov	 edx, DWORD PTR _fName$[ebp]
  00026	52		 push	 edx
  00027	8d 45 bc	 lea	 eax, DWORD PTR _fileName$[ebp]
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy
  00031	83 c4 08	 add	 esp, 8

; 182  : 	strcat(fileName, expNoStr);

  00034	8d 4d b8	 lea	 ecx, DWORD PTR _expNoStr$[ebp]
  00037	51		 push	 ecx
  00038	8d 55 bc	 lea	 edx, DWORD PTR _fileName$[ebp]
  0003b	52		 push	 edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcat
  00042	83 c4 08	 add	 esp, 8

; 183  : 	strcat(fileName, ".txt\0");

  00045	68 00 00 00 00	 push	 OFFSET $SG4294967278
  0004a	8d 45 bc	 lea	 eax, DWORD PTR _fileName$[ebp]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcat
  00054	83 c4 08	 add	 esp, 8

; 184  : 
; 185  : 	fp = fopen(fileName, "w");

  00057	68 00 00 00 00	 push	 OFFSET $SG4294967277
  0005c	8d 4d bc	 lea	 ecx, DWORD PTR _fileName$[ebp]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00066	83 c4 08	 add	 esp, 8
  00069	a3 00 00 00 00	 mov	 DWORD PTR ?fp@?1??NewExperimOutFile@@9@9, eax

; 186  : 
; 187  : 	return fp;

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp@?1??NewExperimOutFile@@9@9

; 188  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_NewExperimOutFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\dataio.c
_TEXT	SEGMENT
_fp$ = -4						; size = 4
_fName$ = 8						; size = 4
_cases$ = 12						; size = 4
_nSamples$ = 16						; size = 4
_WriteBestProgOuts PROC

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 192  :     static int i, j;
; 193  :     FILE *fp;
; 194  : 
; 195  :     fp = fopen(fName, "w");

  00004	68 00 00 00 00	 push	 OFFSET $SG4294967276
  00009	8b 45 08	 mov	 eax, DWORD PTR _fName$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00013	83 c4 08	 add	 esp, 8
  00016	89 45 fc	 mov	 DWORD PTR _fp$[ebp], eax

; 196  :     for (i = 0; i < nSamples; i++)

  00019	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@?1??WriteBestProgOuts@@9@9, 0
  00023	eb 0f		 jmp	 SHORT $LN3@WriteBestP
$LN2@WriteBestP:
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?i@?1??WriteBestProgOuts@@9@9
  0002b	83 c1 01	 add	 ecx, 1
  0002e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?i@?1??WriteBestProgOuts@@9@9, ecx
$LN3@WriteBestP:
  00034	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?i@?1??WriteBestProgOuts@@9@9
  0003a	3b 55 10	 cmp	 edx, DWORD PTR _nSamples$[ebp]
  0003d	7d 51		 jge	 SHORT $LN1@WriteBestP

; 197  :     {
; 198  : 		InitCase(i, cases);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _cases$[ebp]
  00042	50		 push	 eax
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?i@?1??WriteBestProgOuts@@9@9
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _InitCase
  0004f	83 c4 08	 add	 esp, 8

; 199  : 		RunCase(caseVector);

  00052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _caseVector
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _RunCase
  0005e	83 c4 04	 add	 esp, 4

; 200  : 		fprintf(fp, "%f\n", caseVector[0]);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 00	 imul	 ecx, eax, 0
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _caseVector
  0006f	f3 0f 5a 04 0a	 cvtss2sd xmm0, DWORD PTR [edx+ecx]
  00074	83 ec 08	 sub	 esp, 8
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	68 00 00 00 00	 push	 OFFSET $SG4294967275
  00081	8b 45 fc	 mov	 eax, DWORD PTR _fp$[ebp]
  00084	50		 push	 eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0008b	83 c4 10	 add	 esp, 16			; 00000010H

; 201  :     }

  0008e	eb 95		 jmp	 SHORT $LN2@WriteBestP
$LN1@WriteBestP:

; 202  :     fclose(fp);

  00090	8b 4d fc	 mov	 ecx, DWORD PTR _fp$[ebp]
  00093	51		 push	 ecx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0009a	83 c4 04	 add	 esp, 4

; 203  : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_WriteBestProgOuts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\dataio.c
_TEXT	SEGMENT
_fp$ = 8						; size = 4
_cases$ = 12						; size = 4
_nSamples$ = 16						; size = 4
_WriteProgOuts PROC

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  :     static int i, j;
; 208  : 
; 209  :     for (i = 0; i < nSamples; i++)

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@?1??WriteProgOuts@@9@9, 0
  0000d	eb 0d		 jmp	 SHORT $LN3@WriteProgO
$LN2@WriteProgO:
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@?1??WriteProgOuts@@9@9
  00014	83 c0 01	 add	 eax, 1
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?i@?1??WriteProgOuts@@9@9, eax
$LN3@WriteProgO:
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?i@?1??WriteProgOuts@@9@9
  00022	3b 4d 10	 cmp	 ecx, DWORD PTR _nSamples$[ebp]
  00025	7d 50		 jge	 SHORT $LN1@WriteProgO

; 210  :     {
; 211  : 		InitCase(i, cases);

  00027	8b 55 0c	 mov	 edx, DWORD PTR _cases$[ebp]
  0002a	52		 push	 edx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@?1??WriteProgOuts@@9@9
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _InitCase
  00036	83 c4 08	 add	 esp, 8

; 212  : 		RunCase(caseVector);

  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _caseVector
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _RunCase
  00045	83 c4 04	 add	 esp, 4

; 213  : 		fprintf(fp, "%f\n", caseVector[0]);

  00048	ba 04 00 00 00	 mov	 edx, 4
  0004d	6b c2 00	 imul	 eax, edx, 0
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _caseVector
  00056	f3 0f 5a 04 01	 cvtss2sd xmm0, DWORD PTR [ecx+eax]
  0005b	83 ec 08	 sub	 esp, 8
  0005e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00063	68 00 00 00 00	 push	 OFFSET $SG4294967274
  00068	8b 55 08	 mov	 edx, DWORD PTR _fp$[ebp]
  0006b	52		 push	 edx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00072	83 c4 10	 add	 esp, 16			; 00000010H

; 214  :     }

  00075	eb 98		 jmp	 SHORT $LN2@WriteProgO
$LN1@WriteProgO:

; 215  :     fclose(fp);

  00077	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00081	83 c4 04	 add	 esp, 4

; 216  : }

  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_WriteProgOuts ENDP
_TEXT	ENDS
END
