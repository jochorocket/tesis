; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	D:\JOCHO\sanpa\seminario de tesis\QILGP\QILGP\qilgp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp___time64:PROC
PUBLIC	_RunQILGP
PUBLIC	_SetEvolution
PUBLIC	_SetInputCases
PUBLIC	_SetIndiv
PUBLIC	_SetQIndiv
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  :     return _time64(_Time);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0000d	83 c4 04	 add	 esp, 4

; 134  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\qilgp.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_i$ = -4						; size = 4
__qIndivLen$ = 8					; size = 4
__qNopProb$ = 12					; size = 8
__nFuncs$ = 20						; size = 1
__termsDim$ = 24					; size = 1
__termsCardins$ = 28					; size = 4
__termIdxs$ = 32					; size = 4
__destReg0$ = 36					; size = 4
__typedTerms$ = 40					; size = 1
__effObserving$ = 44					; size = 1
__mCodesLens$ = 48					; size = 4
__mCodeDim$ = 52					; size = 1
__mCodeTable$ = 56					; size = 4
_SetQIndiv PROC

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 29   : 	int i;
; 30   : 	int len;
; 31   : 
; 32   : 	qIndivLen = _qIndivLen;

  00006	8b 45 08	 mov	 eax, DWORD PTR __qIndivLen$[ebp]
  00009	a3 00 00 00 00	 mov	 DWORD PTR _qIndivLen, eax

; 33   : 	qNopProb = _qNopProb;

  0000e	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR __qNopProb$[ebp]
  00013	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR _qNopProb, xmm0

; 34   : 	nFuncs = _nFuncs;

  0001b	8a 4d 14	 mov	 cl, BYTE PTR __nFuncs$[ebp]
  0001e	88 0d 00 00 00
	00		 mov	 BYTE PTR _nFuncs, cl

; 35   : 	termsDim = _termsDim;

  00024	8a 55 18	 mov	 dl, BYTE PTR __termsDim$[ebp]
  00027	88 15 00 00 00
	00		 mov	 BYTE PTR _termsDim, dl

; 36   : 	typedTerms = _typedTerms;

  0002d	8a 45 28	 mov	 al, BYTE PTR __typedTerms$[ebp]
  00030	a2 00 00 00 00	 mov	 BYTE PTR _typedTerms, al

; 37   : 	effObserving = _effObserving;

  00035	8a 4d 2c	 mov	 cl, BYTE PTR __effObserving$[ebp]
  00038	88 0d 00 00 00
	00		 mov	 BYTE PTR _effObserving, cl

; 38   : 	mCodeDim = _mCodeDim;

  0003e	8a 55 34	 mov	 dl, BYTE PTR __mCodeDim$[ebp]
  00041	88 15 00 00 00
	00		 mov	 BYTE PTR _mCodeDim, dl

; 39   : 	qIndivInitLen = 8;

  00047	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _qIndivInitLen, 8

; 40   : 
; 41   : 	destReg0 = malloc(nFuncs * sizeof(byte));

  00051	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _nFuncs
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0005f	83 c4 04	 add	 esp, 4
  00062	a3 00 00 00 00	 mov	 DWORD PTR _destReg0, eax

; 42   : 	for (i = 0; i < nFuncs; i++)

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN16@SetQIndiv
$LN15@SetQIndiv:
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00073	83 c1 01	 add	 ecx, 1
  00076	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN16@SetQIndiv:
  00079	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _nFuncs
  00080	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  00083	7d 14		 jge	 SHORT $LN14@SetQIndiv

; 43   : 	{
; 44   : 		destReg0[i] = _destReg0[i];

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _destReg0
  0008a	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  0008d	8b 4d 24	 mov	 ecx, DWORD PTR __destReg0$[ebp]
  00090	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00093	8a 11		 mov	 dl, BYTE PTR [ecx]
  00095	88 10		 mov	 BYTE PTR [eax], dl

; 45   : 	}

  00097	eb d7		 jmp	 SHORT $LN15@SetQIndiv
$LN14@SetQIndiv:

; 46   : 
; 47   : 	termsCardins = malloc(nFuncs * sizeof(byte));

  00099	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _nFuncs
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000a7	83 c4 04	 add	 esp, 4
  000aa	a3 00 00 00 00	 mov	 DWORD PTR _termsCardins, eax

; 48   : 	for (i = 0; i < nFuncs; i++)

  000af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b6	eb 09		 jmp	 SHORT $LN13@SetQIndiv
$LN12@SetQIndiv:
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bb	83 c1 01	 add	 ecx, 1
  000be	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN13@SetQIndiv:
  000c1	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _nFuncs
  000c8	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  000cb	7d 14		 jge	 SHORT $LN11@SetQIndiv

; 49   : 	{
; 50   : 		termsCardins[i] = _termsCardins[i];

  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _termsCardins
  000d2	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  000d5	8b 4d 1c	 mov	 ecx, DWORD PTR __termsCardins$[ebp]
  000d8	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  000db	8a 11		 mov	 dl, BYTE PTR [ecx]
  000dd	88 10		 mov	 BYTE PTR [eax], dl

; 51   : 	}

  000df	eb d7		 jmp	 SHORT $LN12@SetQIndiv
$LN11@SetQIndiv:

; 52   : 
; 53   : 	if (_termIdxs != NULL)

  000e1	83 7d 20 00	 cmp	 DWORD PTR __termIdxs$[ebp], 0
  000e5	74 48		 je	 SHORT $LN7@SetQIndiv

; 54   : 	{
; 55   : 		termIdxs = malloc(nFuncs * sizeof(byte));

  000e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _nFuncs
  000ee	50		 push	 eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000f5	83 c4 04	 add	 esp, 4
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _termIdxs, eax

; 56   : 		for (i = 0; i < nFuncs; i++)

  000fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00104	eb 09		 jmp	 SHORT $LN9@SetQIndiv
$LN8@SetQIndiv:
  00106	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00109	83 c1 01	 add	 ecx, 1
  0010c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN9@SetQIndiv:
  0010f	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _nFuncs
  00116	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  00119	7d 14		 jge	 SHORT $LN7@SetQIndiv

; 57   : 		{
; 58   : 			termIdxs[i] = _termIdxs[i];

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _termIdxs
  00120	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00123	8b 4d 20	 mov	 ecx, DWORD PTR __termIdxs$[ebp]
  00126	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00129	8a 11		 mov	 dl, BYTE PTR [ecx]
  0012b	88 10		 mov	 BYTE PTR [eax], dl

; 59   : 		}

  0012d	eb d7		 jmp	 SHORT $LN8@SetQIndiv
$LN7@SetQIndiv:

; 60   : 	}
; 61   : 
; 62   : 	len = nFuncs * termsDim;

  0012f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _nFuncs
  00136	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _termsDim
  0013d	0f af c1	 imul	 eax, ecx
  00140	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 63   : 	mCodesLens = malloc(len * sizeof(byte));

  00143	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  00146	52		 push	 edx
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0014d	83 c4 04	 add	 esp, 4
  00150	a3 00 00 00 00	 mov	 DWORD PTR _mCodesLens, eax

; 64   : 	for (i = 0; i < len; i++)

  00155	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0015c	eb 09		 jmp	 SHORT $LN6@SetQIndiv
$LN5@SetQIndiv:
  0015e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00161	83 c0 01	 add	 eax, 1
  00164	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN6@SetQIndiv:
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0016a	3b 4d f8	 cmp	 ecx, DWORD PTR _len$[ebp]
  0016d	7d 15		 jge	 SHORT $LN4@SetQIndiv

; 65   : 	{
; 66   : 		mCodesLens[i] = _mCodesLens[i];

  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mCodesLens
  00175	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  00178	8b 45 30	 mov	 eax, DWORD PTR __mCodesLens$[ebp]
  0017b	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  0017e	8a 08		 mov	 cl, BYTE PTR [eax]
  00180	88 0a		 mov	 BYTE PTR [edx], cl

; 67   : 	}

  00182	eb da		 jmp	 SHORT $LN5@SetQIndiv
$LN4@SetQIndiv:

; 68   : 
; 69   : 	len *= mCodeDim;

  00184	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _mCodeDim
  0018b	0f af 55 f8	 imul	 edx, DWORD PTR _len$[ebp]
  0018f	89 55 f8	 mov	 DWORD PTR _len$[ebp], edx

; 70   : 	mCodeTable = malloc(len * sizeof(byte));

  00192	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  00195	50		 push	 eax
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0019c	83 c4 04	 add	 esp, 4
  0019f	a3 00 00 00 00	 mov	 DWORD PTR _mCodeTable, eax

; 71   : 	for (i = 0; i < len; i++)

  001a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001ab	eb 09		 jmp	 SHORT $LN3@SetQIndiv
$LN2@SetQIndiv:
  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b0	83 c1 01	 add	 ecx, 1
  001b3	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN3@SetQIndiv:
  001b6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001b9	3b 55 f8	 cmp	 edx, DWORD PTR _len$[ebp]
  001bc	7d 14		 jge	 SHORT $LN1@SetQIndiv

; 72   : 	{
; 73   : 		mCodeTable[i] = _mCodeTable[i];

  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR _mCodeTable
  001c3	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  001c6	8b 4d 38	 mov	 ecx, DWORD PTR __mCodeTable$[ebp]
  001c9	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  001cc	8a 11		 mov	 dl, BYTE PTR [ecx]
  001ce	88 10		 mov	 BYTE PTR [eax], dl

; 74   : 	}

  001d0	eb db		 jmp	 SHORT $LN2@SetQIndiv
$LN1@SetQIndiv:

; 75   : 
; 76   : 	return nFuncs;

  001d2	a0 00 00 00 00	 mov	 al, BYTE PTR _nFuncs

; 77   : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
_SetQIndiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\qilgp.c
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
__header$ = 8						; size = 4
__headerLen$ = 12					; size = 1
__footer$ = 16						; size = 4
__footerLen$ = 20					; size = 1
_SetIndiv PROC

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 85   : 	int i, j;
; 86   : 	
; 87   : 	headerLen = _headerLen;

  00006	8a 45 0c	 mov	 al, BYTE PTR __headerLen$[ebp]
  00009	a2 00 00 00 00	 mov	 BYTE PTR _headerLen, al

; 88   : 	footerLen = _footerLen;

  0000e	8a 4d 14	 mov	 cl, BYTE PTR __footerLen$[ebp]
  00011	88 0d 00 00 00
	00		 mov	 BYTE PTR _footerLen, cl

; 89   : 
; 90   : 	header = malloc(headerLen * sizeof(byte));

  00017	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _headerLen
  0001e	52		 push	 edx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00025	83 c4 04	 add	 esp, 4
  00028	a3 00 00 00 00	 mov	 DWORD PTR _header, eax

; 91   : 	for (i = 0; i < headerLen; i++)

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00034	eb 09		 jmp	 SHORT $LN6@SetIndiv
$LN5@SetIndiv:
  00036	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN6@SetIndiv:
  0003f	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _headerLen
  00046	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  00049	7d 15		 jge	 SHORT $LN4@SetIndiv

; 92   : 	{
; 93   : 		header[i] = _header[i];

  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _header
  00051	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  00054	8b 45 08	 mov	 eax, DWORD PTR __header$[ebp]
  00057	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  0005a	8a 08		 mov	 cl, BYTE PTR [eax]
  0005c	88 0a		 mov	 BYTE PTR [edx], cl

; 94   : 	}

  0005e	eb d6		 jmp	 SHORT $LN5@SetIndiv
$LN4@SetIndiv:

; 95   : 
; 96   : 	footer = malloc(footerLen * sizeof(byte));

  00060	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _footerLen
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006e	83 c4 04	 add	 esp, 4
  00071	a3 00 00 00 00	 mov	 DWORD PTR _footer, eax

; 97   : 	for (j = 0; j< footerLen; j++)

  00076	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN3@SetIndiv
$LN2@SetIndiv:
  0007f	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN3@SetIndiv:
  00088	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _footerLen
  0008f	39 4d f8	 cmp	 DWORD PTR _j$[ebp], ecx
  00092	7d 15		 jge	 SHORT $LN7@SetIndiv

; 98   : 	{
; 99   : 		footer[j] = _footer[j];

  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _footer
  0009a	03 55 f8	 add	 edx, DWORD PTR _j$[ebp]
  0009d	8b 45 10	 mov	 eax, DWORD PTR __footer$[ebp]
  000a0	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  000a3	8a 08		 mov	 cl, BYTE PTR [eax]
  000a5	88 0a		 mov	 BYTE PTR [edx], cl

; 100  : 	}

  000a7	eb d6		 jmp	 SHORT $LN2@SetIndiv
$LN7@SetIndiv:

; 101  : 
; 102  : }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_SetIndiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\qilgp.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_i$ = -4						; size = 4
__classifProb$ = 8					; size = 1
__trainingData$ = 12					; size = 4
__validatingData$ = 16					; size = 4
__testingData$ = 20					; size = 4
__nSamplesTrain$ = 24					; size = 4
__nSamplesValid$ = 28					; size = 4
__nSamplesTest$ = 32					; size = 4
__dataRowDim$ = 36					; size = 4
__consts$ = 40						; size = 4
__nConsts$ = 44						; size = 4
_SetInputCases PROC

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 116  : 	int i;
; 117  : 	int len;
; 118  : 
; 119  : 	classifProb = _classifProb;

  00006	8a 45 08	 mov	 al, BYTE PTR __classifProb$[ebp]
  00009	a2 00 00 00 00	 mov	 BYTE PTR _classifProb, al

; 120  : 	nSamplesTrain = _nSamplesTrain;

  0000e	8b 4d 18	 mov	 ecx, DWORD PTR __nSamplesTrain$[ebp]
  00011	89 0d 00 00 00
	00		 mov	 DWORD PTR _nSamplesTrain, ecx

; 121  : 	nSamplesValid = _nSamplesValid;

  00017	8b 55 1c	 mov	 edx, DWORD PTR __nSamplesValid$[ebp]
  0001a	89 15 00 00 00
	00		 mov	 DWORD PTR _nSamplesValid, edx

; 122  : 	nSamplesTest = _nSamplesTest;

  00020	8b 45 20	 mov	 eax, DWORD PTR __nSamplesTest$[ebp]
  00023	a3 00 00 00 00	 mov	 DWORD PTR _nSamplesTest, eax

; 123  : 	dataRowDim = _dataRowDim;

  00028	8b 4d 24	 mov	 ecx, DWORD PTR __dataRowDim$[ebp]
  0002b	89 0d 00 00 00
	00		 mov	 DWORD PTR _dataRowDim, ecx

; 124  : 	nConsts = _nConsts;

  00031	8b 55 2c	 mov	 edx, DWORD PTR __nConsts$[ebp]
  00034	89 15 00 00 00
	00		 mov	 DWORD PTR _nConsts, edx

; 125  : 	nVars = dataRowDim - 1;

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR _dataRowDim
  0003f	83 e8 01	 sub	 eax, 1
  00042	a3 00 00 00 00	 mov	 DWORD PTR _nVars, eax

; 126  : 
; 127  : 	len = nSamplesTrain * dataRowDim;

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nSamplesTrain
  0004d	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR _dataRowDim
  00054	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx

; 128  : 
; 129  : 	trainingData = malloc(len * sizeof(double));

  00057	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0005a	c1 e2 03	 shl	 edx, 3
  0005d	52		 push	 edx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00064	83 c4 04	 add	 esp, 4
  00067	a3 00 00 00 00	 mov	 DWORD PTR _trainingData, eax

; 130  : 	for (i = 0; i < len; i++)

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00073	eb 09		 jmp	 SHORT $LN14@SetInputCa
$LN13@SetInputCa:
  00075	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN14@SetInputCa:
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00081	3b 4d f8	 cmp	 ecx, DWORD PTR _len$[ebp]
  00084	7d 1b		 jge	 SHORT $LN12@SetInputCa

; 131  : 	{
; 132  : 		trainingData[i] = _trainingData[i];

  00086	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00089	8b 45 0c	 mov	 eax, DWORD PTR __trainingData$[ebp]
  0008c	f2 0f 5a 04 d0	 cvtsd2ss xmm0, QWORD PTR [eax+edx*8]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _trainingData
  0009a	f3 0f 11 04 8a	 movss	 DWORD PTR [edx+ecx*4], xmm0

; 133  : 	}

  0009f	eb d4		 jmp	 SHORT $LN13@SetInputCa
$LN12@SetInputCa:

; 134  : 
; 135  : 	if (_validatingData)

  000a1	83 7d 10 00	 cmp	 DWORD PTR __validatingData$[ebp], 0
  000a5	74 59		 je	 SHORT $LN8@SetInputCa

; 136  : 	{
; 137  : 		len = nSamplesValid * dataRowDim;

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSamplesValid
  000ac	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _dataRowDim
  000b3	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 138  : 		validatingData = malloc(len * sizeof(double));

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _len$[ebp]
  000b9	c1 e1 03	 shl	 ecx, 3
  000bc	51		 push	 ecx
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000c3	83 c4 04	 add	 esp, 4
  000c6	a3 00 00 00 00	 mov	 DWORD PTR _validatingData, eax

; 139  : 		for (i = 0; i < len; i++)

  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d2	eb 09		 jmp	 SHORT $LN10@SetInputCa
$LN9@SetInputCa:
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000d7	83 c2 01	 add	 edx, 1
  000da	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN10@SetInputCa:
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e0	3b 45 f8	 cmp	 eax, DWORD PTR _len$[ebp]
  000e3	7d 1b		 jge	 SHORT $LN8@SetInputCa

; 140  : 		{
; 141  : 			validatingData[i] = _validatingData[i];

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000e8	8b 55 10	 mov	 edx, DWORD PTR __validatingData$[ebp]
  000eb	f2 0f 5a 04 ca	 cvtsd2ss xmm0, QWORD PTR [edx+ecx*8]
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _validatingData
  000f9	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 142  : 		}

  000fe	eb d4		 jmp	 SHORT $LN9@SetInputCa
$LN8@SetInputCa:

; 143  : 	}
; 144  : 
; 145  : 	if (_testingData)

  00100	83 7d 14 00	 cmp	 DWORD PTR __testingData$[ebp], 0
  00104	74 59		 je	 SHORT $LN4@SetInputCa

; 146  : 	{
; 147  : 		len = nSamplesTest * dataRowDim;

  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nSamplesTest
  0010c	0f af 15 00 00
	00 00		 imul	 edx, DWORD PTR _dataRowDim
  00113	89 55 f8	 mov	 DWORD PTR _len$[ebp], edx

; 148  : 		testingData = malloc(len * sizeof(double));

  00116	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  00119	c1 e0 03	 shl	 eax, 3
  0011c	50		 push	 eax
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00123	83 c4 04	 add	 esp, 4
  00126	a3 00 00 00 00	 mov	 DWORD PTR _testingData, eax

; 149  : 		for (i = 0; i < len; i++)

  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00132	eb 09		 jmp	 SHORT $LN6@SetInputCa
$LN5@SetInputCa:
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00137	83 c1 01	 add	 ecx, 1
  0013a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN6@SetInputCa:
  0013d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00140	3b 55 f8	 cmp	 edx, DWORD PTR _len$[ebp]
  00143	7d 1a		 jge	 SHORT $LN4@SetInputCa

; 150  : 		{
; 151  : 			testingData[i] = _testingData[i];

  00145	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00148	8b 4d 14	 mov	 ecx, DWORD PTR __testingData$[ebp]
  0014b	f2 0f 5a 04 c1	 cvtsd2ss xmm0, QWORD PTR [ecx+eax*8]
  00150	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR _testingData
  00158	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 152  : 		}

  0015d	eb d5		 jmp	 SHORT $LN5@SetInputCa
$LN4@SetInputCa:

; 153  : 	}
; 154  : 
; 155  : 	consts = malloc(nConsts * sizeof(double));

  0015f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nConsts
  00165	c1 e1 03	 shl	 ecx, 3
  00168	51		 push	 ecx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0016f	83 c4 04	 add	 esp, 4
  00172	a3 00 00 00 00	 mov	 DWORD PTR _consts, eax

; 156  : 	for (i = 0; i < nConsts; i++)

  00177	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0017e	eb 09		 jmp	 SHORT $LN3@SetInputCa
$LN2@SetInputCa:
  00180	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00183	83 c2 01	 add	 edx, 1
  00186	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN3@SetInputCa:
  00189	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0018c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _nConsts
  00192	7d 1b		 jge	 SHORT $LN1@SetInputCa

; 157  : 	{
; 158  : 		consts[i] = _consts[i];

  00194	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00197	8b 55 28	 mov	 edx, DWORD PTR __consts$[ebp]
  0019a	f2 0f 5a 04 ca	 cvtsd2ss xmm0, QWORD PTR [edx+ecx*8]
  0019f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consts
  001a8	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 159  : 	}

  001ad	eb d1		 jmp	 SHORT $LN2@SetInputCa
$LN1@SetInputCa:

; 160  : 
; 161  : 	InitCaseVector();

  001af	e8 00 00 00 00	 call	 _InitCaseVector

; 162  : }

  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
_SetInputCases ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\qilgp.c
_TEXT	SEGMENT
__lGateStep$ = 8					; size = 8
__popSize$ = 16						; size = 4
__nDemes$ = 20						; size = 4
__nCycles$ = 24						; size = 4
__nGenerations$ = 28					; size = 4
__generationsFreq$ = 32					; size = 4
__nExperiments$ = 36					; size = 4
_SetEvolution PROC

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 173  : 	lGateStep = _lGateStep;

  00003	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __lGateStep$[ebp]
  00008	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR _lGateStep, xmm0

; 174  : 	popSize = _popSize;

  00010	8b 45 10	 mov	 eax, DWORD PTR __popSize$[ebp]
  00013	a3 00 00 00 00	 mov	 DWORD PTR _popSize, eax

; 175  : 	nDemes = _nDemes;

  00018	8b 4d 14	 mov	 ecx, DWORD PTR __nDemes$[ebp]
  0001b	89 0d 00 00 00
	00		 mov	 DWORD PTR _nDemes, ecx

; 176  : 	nCycles = _nCycles;

  00021	8b 55 18	 mov	 edx, DWORD PTR __nCycles$[ebp]
  00024	89 15 00 00 00
	00		 mov	 DWORD PTR _nCycles, edx

; 177  : 	nGenerations = _nGenerations;

  0002a	8b 45 1c	 mov	 eax, DWORD PTR __nGenerations$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR _nGenerations, eax

; 178  : 	generationsFreq = _generationsFreq;

  00032	8b 4d 20	 mov	 ecx, DWORD PTR __generationsFreq$[ebp]
  00035	89 0d 00 00 00
	00		 mov	 DWORD PTR _generationsFreq, ecx

; 179  : 	nExperiments = _nExperiments;

  0003b	8b 55 24	 mov	 edx, DWORD PTR __nExperiments$[ebp]
  0003e	89 15 00 00 00
	00		 mov	 DWORD PTR _nExperiments, edx

; 180  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_SetEvolution ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\jocho\sanpa\seminario de tesis\qilgp\qilgp\qilgp.c
_TEXT	SEGMENT
_i$ = -4						; size = 4
_RunQILGP PROC

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 185  : 	unsigned int i;
; 186  : 	//srand((unsigned int)time(NULL));
; 187  : 	// 0 to 4,294,967,295 (4294967295)
; 188  : 	//srand(3221225472); 
; 189  : 	init_genrand((unsigned long)time(NULL));

  00004	6a 00		 push	 0
  00006	e8 00 00 00 00	 call	 _time
  0000b	83 c4 04	 add	 esp, 4
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _init_genrand
  00014	83 c4 04	 add	 esp, 4

; 190  : 	//init_genrand(0); //0//1073741824//2147483648//3221225472//-//536870912//1610612736//2684354560//3758096384
; 191  : 
; 192  : 	writeFreq = nGenerations / 100;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _nGenerations
  0001c	33 d2		 xor	 edx, edx
  0001e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00023	f7 f1		 div	 ecx
  00025	a3 00 00 00 00	 mov	 DWORD PTR _writeFreq, eax

; 193  : 	indivLen = (headerLen + qIndivLen * mCodeDim + footerLen);

  0002a	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _headerLen
  00031	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _mCodeDim
  00038	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _qIndivLen
  0003f	03 d0		 add	 edx, eax
  00041	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _footerLen
  00048	03 d1		 add	 edx, ecx
  0004a	89 15 00 00 00
	00		 mov	 DWORD PTR _indivLen, edx

; 194  : 	InitSintaticTable();

  00050	e8 00 00 00 00	 call	 _InitSintaticTable

; 195  : 	InitIndiv();

  00055	e8 00 00 00 00	 call	 _InitIndiv

; 196  : 
; 197  : 	accumFit = malloc(nGenerations / writeFreq * sizeof(double));

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _nGenerations
  0005f	33 d2		 xor	 edx, edx
  00061	f7 35 00 00 00
	00		 div	 DWORD PTR _writeFreq
  00067	c1 e0 03	 shl	 eax, 3
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00071	83 c4 04	 add	 esp, 4
  00074	a3 00 00 00 00	 mov	 DWORD PTR _accumFit, eax

; 198  : 	accumValFit = malloc(nGenerations / writeFreq * sizeof(double));

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _nGenerations
  0007e	33 d2		 xor	 edx, edx
  00080	f7 35 00 00 00
	00		 div	 DWORD PTR _writeFreq
  00086	c1 e0 03	 shl	 eax, 3
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00090	83 c4 04	 add	 esp, 4
  00093	a3 00 00 00 00	 mov	 DWORD PTR _accumValFit, eax

; 199  : 	accumLen = malloc(nGenerations / writeFreq * sizeof(double));

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _nGenerations
  0009d	33 d2		 xor	 edx, edx
  0009f	f7 35 00 00 00
	00		 div	 DWORD PTR _writeFreq
  000a5	c1 e0 03	 shl	 eax, 3
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000af	83 c4 04	 add	 esp, 4
  000b2	a3 00 00 00 00	 mov	 DWORD PTR _accumLen, eax

; 200  : 	for (i = 0; i < (nGenerations / writeFreq); i++)

  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000be	eb 09		 jmp	 SHORT $LN3@RunQILGP
$LN2@RunQILGP:
  000c0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000c3	83 c2 01	 add	 edx, 1
  000c6	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN3@RunQILGP:
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _nGenerations
  000ce	33 d2		 xor	 edx, edx
  000d0	f7 35 00 00 00
	00		 div	 DWORD PTR _writeFreq
  000d6	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  000d9	73 3d		 jae	 SHORT $LN1@RunQILGP

; 201  : 	{
; 202  : 		accumFit[i] = 0;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _accumFit
  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ec	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 203  : 		accumValFit[i] = 0;

  000f1	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR _accumValFit
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00101	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 204  : 		accumLen[i] = 0;

  00106	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00109	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _accumLen
  0010f	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0

; 205  : 	}

  00116	eb a8		 jmp	 SHORT $LN2@RunQILGP
$LN1@RunQILGP:

; 206  : 	nEvaluations = 0;

  00118	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nEvaluations, 0

; 207  : 
; 208  : 	bestTkIndiv.error = HUGE_VAL;

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___HUGE
  00127	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0012b	f2 0f 11 05 18
	00 00 00	 movsd	 QWORD PTR _bestTkIndiv+24, xmm0

; 209  : 	bestTkIndiv.fitness = HUGE_VAL;

  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___HUGE
  00139	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0013d	f2 0f 11 05 08
	00 00 00	 movsd	 QWORD PTR _bestTkIndiv+8, xmm0

; 210  : 	bestTkIndiv.validFitness = HUGE_VAL;

  00145	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp___HUGE
  0014b	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  0014f	f2 0f 11 05 10
	00 00 00	 movsd	 QWORD PTR _bestTkIndiv+16, xmm0

; 211  : 	bestTkIndiv.genome = malloc(qIndivLen * sizeof(int) * 2);

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _qIndivLen
  0015c	c1 e0 02	 shl	 eax, 2
  0015f	d1 e0		 shl	 eax, 1
  00161	50		 push	 eax
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00168	83 c4 04	 add	 esp, 4
  0016b	a3 00 00 00 00	 mov	 DWORD PTR _bestTkIndiv, eax

; 212  : 
; 213  : 	return RunMultiQILGP();

  00170	e8 00 00 00 00	 call	 _RunMultiQILGP

; 214  : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
_RunQILGP ENDP
_TEXT	ENDS
END
